#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<time.h>

int n, r;
struct frame {
    char ack;
    int data;
} frame[10];

void sender(void);
void recvack(void);
void selectiverepeat(void);
void goback(void);

int main() {
    int c;
    srand(time(NULL)); // Seed random number generator
    do {
        printf("\n1. SELECTIVE REPEAT \n2. GOBACKN \n3. EXIT\n");
        printf("Enter your choice:\n");
        scanf("%d", &c);
        switch (c) {
            case 1: selectiverepeat(); break;
            case 2: goback(); break;
            case 3: exit(0); break;
            default: printf("Invalid choice.\n");
        }
    } while (c != 3);
}

void sender() {
    printf("Enter the number of frames to be sent: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter the data for frame [%d]: ", i);
        scanf("%d", &frame[i].data);
        frame[i].ack = 'y';  // Initialize all frames as acknowledged
    }
}

void recvack() {
    r = rand() % n;  // Randomly select a frame
    frame[r].ack = 'n';  // Simulate lost acknowledgment
    printf("Frame number %d not received!\n", r);
}

void selectiverepeat() {
    sender();
    recvack();
    printf("Resending frame %d\n", r);
    sleep(2);
    frame[r].ack = 'y';  // Resend the lost frame
    printf("Received frame: %d\n", frame[r].data);
}

void goback() {
    sender();
    recvack();
    printf("Resending frames starting from %d\n", r);
    for (int i = r; i < n; i++) {
        sleep(2);
        frame[i].ack = 'y';  // Resend frames starting from the lost one
        printf("Received frame: %d\n", frame[i].data);
    }
}








